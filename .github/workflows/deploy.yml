# üìÇ .github/workflows/deploy.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ecommerce
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. JDK ÏÑ§Ï†ï
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle ÎπåÎìú
      - name: Build MemberService
        run: |
          cd MemberService
          ./gradlew clean build -x test

      - name: Build Docker Image for MemberService
        run: |
          docker build -t member-service:${{ github.sha }} -f MemberService/Dockerfile MemberService

      - name: Build DeliveryService
        run: |
          cd DeliveryService
          ./gradlew clean build -x test

      - name: Build Docker Image for DeliveryService
        run: |
          docker build -t delivery-service:${{ github.sha }} -f DeliveryService/Dockerfile DeliveryService

      - name: Build PaymentService
        run: |
          cd PaymentService
          ./gradlew clean build -x test

      - name: Build Docker Image for PaymentService
        run: |
          docker build -t payment-service:${{ github.sha }} -f PaymentService/Dockerfile PaymentService

      # 4. AWS Î°úÍ∑∏Ïù∏ (ECR)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 5. Docker ÌÉúÍ∑∏ + Ìë∏Ïãú (ÏÑúÎπÑÏä§ Íµ¨Î∂ÑÏùÑ tagÎ°ú)
      - name: Tag & Push MemberService
        run: |
          docker tag member-service:${{ github.sha }} \
            ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:member-service-${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:member-service-${{ github.sha }}

      - name: Tag & Push DeliveryService
        run: |
          docker tag delivery-service:${{ github.sha }} \
            ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:delivery-service-${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:delivery-service-${{ github.sha }}

      - name: Tag & Push PaymentService
        run: |
          docker tag payment-service:${{ github.sha }} \
            ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:payment-service-${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:payment-service-${{ github.sha }}

      # 6. EC2 SSH Ï†ëÏÜç ‚Üí Ïª®ÌÖåÏù¥ÎÑà Ïû¨ÏãúÏûë
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            ECR_REPOSITORY="ecommerce"
            IMAGE_TAG="${{ github.sha }}"
            REGION=${{ secrets.AWS_REGION }}"
            REGISTRY="${{ secrets.ECR_REGISTRY }}"
            IMAGE="$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            echo "üîê Logging in to ECR"
            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $REGISTRY

            echo "üöÄ Pulling image: $IMAGE"
            docker pull $IMAGE

            echo "üõë Stopping existing container (if any)"
            docker stop ecommerce || true
            docker rm ecommerce || true

            echo "üîÑ Running new container"
            docker run -d --name ecommerce -p 8080:8080 $IMAGE
