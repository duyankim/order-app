# üìÇ .github/workflows/deploy.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ecommerce
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. JDK ÏÑ§Ï†ï
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle ÎπåÎìú
      - name: Build MemberService
        run: |
          cd MemberService
          ./gradlew clean build -x test

      - name: Build Docker Image for MemberService
        run: |
          docker build -t member-service:${{ github.sha }} -f MemberService/Dockerfile MemberService

      - name: Build DeliveryService
        run: |
          cd DeliveryService
          ./gradlew clean build -x test

      - name: Build Docker Image for DeliveryService
        run: |
          docker build -t delivery-service:${{ github.sha }} -f DeliveryService/Dockerfile DeliveryService

      - name: Build PaymentService
        run: |
          cd PaymentService
          ./gradlew clean build -x test

      - name: Build Docker Image for PaymentService
        run: |
          docker build -t payment-service:${{ github.sha }} -f PaymentService/Dockerfile PaymentService

      # 4. AWS Î°úÍ∑∏Ïù∏ (ECR)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 5. Docker ÌÉúÍ∑∏ + Ìë∏Ïãú (ÏÑúÎπÑÏä§ Íµ¨Î∂ÑÏùÑ tagÎ°ú)
      - name: Tag & Push Docker Images
        run: |
          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          SHA=${{ github.sha }}
      
          echo "ü™™ Tagging & Pushing MemberService"
          docker tag member-service:$SHA $REGISTRY/$ECR_REPOSITORY:member-service-$SHA
          docker push $REGISTRY/$ECR_REPOSITORY:member-service-$SHA
      
          echo "üì¶ Tagging & Pushing DeliveryService"
          docker tag delivery-service:$SHA $REGISTRY/$ECR_REPOSITORY:delivery-service-$SHA
          docker push $REGISTRY/$ECR_REPOSITORY:delivery-service-$SHA
      
          echo "üí≥ Tagging & Pushing PaymentService"
          docker tag payment-service:$SHA $REGISTRY/$ECR_REPOSITORY:payment-service-$SHA
          docker push $REGISTRY/$ECR_REPOSITORY:payment-service-$SHA
          
      # 6. EC2 SSH Ï†ëÏÜç ‚Üí Ïª®ÌÖåÏù¥ÎÑà Ïû¨ÏãúÏûë
      - name: Deploy via SSH and docker-compose
        uses: appleboy/ssh-action@v1.0.0
        env:
          GITHUB_SHA: ${{ github.sha }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          envs: GITHUB_SHA,AWS_REGION,ECR_REGISTRY,ECR_REPOSITORY
          script: |
            cd /home/ec2-user
                      
            echo "üìÑ Writing .env file"
            echo "GITHUB_SHA=$GITHUB_SHA" > .env
            echo "ECR_REGISTRY=$ECR_REGISTRY" >> .env
            echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> .env
      
            echo "üîê Logging in to ECR"
            aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin $ECR_REGISTRY
      
            echo "üîÑ Pulling latest images"
            ECR_REGISTRY=$ECR_REGISTRY \
            ECR_REPOSITORY=$ECR_REPOSITORY \
            GITHUB_SHA=$GITHUB_SHA \
            docker compose pull
      
            echo "üöÄ Recreating containers"
            ECR_REGISTRY=$ECR_REGISTRY \
            ECR_REPOSITORY=$ECR_REPOSITORY \
            GITHUB_SHA=$GITHUB_SHA \
            docker compose up -d
